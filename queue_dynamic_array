// queue using dynamic array
#include<iostream>
using namespace std ;
template<typename T>
class queueArray{
T *data ;
int firstIndex ;
int nextIndex ;
int size ;
int capacity ;

public:
queueArray(int s){
    data = new T[s] ;
    nextIndex = 0 ;
    firstIndex = -1 ;
    size = 0 ;
    capacity = s ;
}
int getSize(){
    return size ;
}
bool isEmpty(){
    return size == 0 ;
}
// insert element 
void enQueue(T val){
    if(size == capacity){
        T *newdata = new T[2 * capacity] ;
        int j = 0 ;
        for(int i = firstIndex; i < capacity; i++){
            newdata[j] = data[i] ;
            j++ ;
        }
        for(int i = 0; i < firstIndex; i++){
            newdata[j] = data[i] ;
            j++ ;
        }
        delete []data ;
        data = newdata ;
        firstIndex = 0 ;
        nextIndex = capacity ;
        capacity = capacity * 2 ;
    }
    data[nextIndex] = val ;
    nextIndex = (nextIndex + 1) % capacity ;
    if(firstIndex == -1){
    firstIndex = 0 ;
    } 
    size++ ;
}
T front(){
    if(isEmpty()){
        cout << "queue is empty :" ;
        return 0 ;
    }
    return data[firstIndex] ;
}
T dequeue(){
     if(isEmpty()){
        cout << "queue is empty :" ;
        return 0 ;
    }
    T ans = data[firstIndex] ;
    firstIndex = (firstIndex + 1) % capacity ;
    size-- ;
    if(size == 0){
        firstIndex = -1 ;
        nextIndex = 0 ;
    }
    return ans ;
}

};
int main(){
    queueArray <int> q(5) ;
    q.enQueue(10) ;
    q.enQueue(20) ;
    q.enQueue(30) ;
    q.enQueue(40) ;
    q.dequeue() ;
    cout << "front element :" << q.front() <<"\n" ;
    cout << "size of queue :" << q.getSize() << "\n";
    cout <<"is queue empty :" << q.isEmpty() <<"\n";
}
